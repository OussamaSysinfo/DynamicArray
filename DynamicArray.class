public class DynamicArray<T> {
    private T[] array;
    private int size;
    private int capacity;

    public DynamicArray() {
        this(10);
    }

    public DynamicArray(int capacity) {
        this.array = (T[]) new Object[capacity];
        this.size = 0;
        this.capacity = capacity;
    }

    public DynamicArray(T[] array) {
        this.array = Arrays.copyOf(array, array.length);
        this.size = array.length;
        this.capacity = array.length;
    }

    public void add(T element) {
        if (size == capacity) {
            resize();
        }
        array[size++] = element;
    }

    public void insert(int index, T element) {
        if (index < 0  index > size) {
            throw new IndexOutOfBoundsException();
        }
        if (size == capacity) {
            resize();
        }
        System.arraycopy(array, index, array, index + 1, size - index);
        array[index] = element;
        size++;
    }

    public void clear() {
        Arrays.fill(array, null);
        size = 0;
    }

    public T get(int index) {
        if (index < 0  index >= size) {
            throw new IndexOutOfBoundsException();
        }
        return array[index];
    }

    public int size() {
        return size;
    }

    public boolean remove(T element) {
        int index = indexOf(element);
        if (index == -1) {
            return false;
        }
        removeAt(index);
        return true;
    }

    public T removeAt(int index) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException();
        }
        T removedElement = array[index];
        System.arraycopy(array, index + 1, array, index, size - index - 1);
        array[--size] = null;
        return removedElement;
    }

    public int indexOf(T element) {
        for (int i = 0; i < size; i++) {
            if (Objects.equals(element, array[i])) {
                return i;
            }
        }
        return -1;
    }

    private void resize() {
        int newCapacity = capacity * 2;
        array = Arrays.copyOf(array, newCapacity);
        capacity = newCapacity;
    }
}